#!/usr/bin/env bash
set -ex
# android application package module
#
# example:
#
# packages:
#   "com.termux" # package name as seen in 'pm list packages'
#     policy => "present",
#     version => "latest",
#     package_module => android_application,
#     # some required options, currently only github org/project is supported
#     options => {
#       "github_org=termux",
#       "github_project=termux-app",
# github_token_secret_path - cf-secret encrypted to the appropriate host api access is all that is needed for most repos
#       "checksum=<the checksum>" # optional, if provided, downloaded apk will be checked
#     };

# shell="" # would be possible if running as root to execute commands directly
shell="adb shell" # needed for either usb-connected devices or devices with local tcp port adb available
# note: if more than one device is available via `adb devices` then this won't work. TODO: option for serial number(s)

get_package_data() {
  # not sure why but get-package-data gets a File input and not Name?
  name="${INPUT_File?File must be given to get-package-data}"
  version=$(_package_version $name)
  echo PackageType=repo
  echo Version=$version
  echo Name=$name
}

_package_version() {
  name="$1"
  versionName=$($shell dumpsys package "$name" | grep versionName | cut -d= -f2)
  versionCode=$($shell dumpsys package "$name" | grep versionCode | cut -d= -f2 | cud -t' ' -f1)
    # it seems that for some packages versionName is a commit sha (pddroidparty) so try versionCode in that case
  case "$versionName" in
    *\.*) version="$versionName" ;;
    *) version="$versionCode" ;;
  esac
  echo "$version"
}

list_installed() {
  arch=$($shell uname -m)
  # seeing output of `pm` command we can limit to only user installed packages. todo: make an option to include all packages (typically a large number of system packages)
  # -3: filter to only show third party packages                                                                                    
  for name in $($shell pm list packages -3 | cut -d: -f2); do
    version=$(_package_version $name)
    echo "Name=$name"
    echo "Version=$version"
    echo "Architecture=$arch"
  done
}

repo_install() {
# Name, Version, options github_organization and github_project
  name="${INPUT_Name?Name must be given to repo-install}"
  version="${INPUT_Version}"
  github_org="${INPUT_github_organization}"
  github_project="${INPUT_github_project}"
  release_regex="${INPUT_release_regex:-.*universal.*}"
  download_url=$(
    curl "https://api.github.com/repos/${github_org}/${github_project}/releases" 2>/dev/null | \
        jq ".[] | \
            select(.tag_name==\"${version}\") | \
            .assets | \
            .[] | \
            select(.name | test(\"${release_regex}\")) | \
            .browser_download_url"
    )
    if [ -z "$url" ]; then
      echo "Could not find universal release."
      exit 1
    fi
    apk=$(mktemp --suffice .apk)
    curl "$url" -O "$apk"
    adb install "$apk" >&2
}


list_updates() {
  # only promises which use the github_organization and github_project options check for updates currently
  # does the installed list include a tag for android_application and org/project


  true
}

remove() {
  name="${INPUT_Name?Name must be given to remove}"
#  adb uninstall "$name" >&2
  # ^^ package name, not apk
  echo "uninstall not yet supported"
  exit 42
}

main() {
  command=$1

  # Output maybe contain backslashes, and we don't want those to end up escaping
  # something so we use use -r with read.
  tmp=$(mktemp)
  while read -r line; do
    # Note that line is a variable assignment, e.g.
    # INPUT_File=syncthing
    if [ ${line:0:7} = "option=" ]; then
      option=${line#option=}
      declare INPUT_$option
    else
      declare INPUT_$line
    fi
    echo $line >> "$tmp-$command"
  done


  case $command in
    supports-api-version)
      echo 1
      ;;
    get-package-data)
      get_package_data
      ;;
    list-installed)
      list_installed
      ;;
    repo-install)
      repo_install
      ;;
    list-updates)
      list_updates
      ;;
    list-updates-local)
      list_updates
      ;;
    remove)
      remove
      ;;
    *)
      echo "ErrorMessage=Invalid operation"
  esac
}

main $1
